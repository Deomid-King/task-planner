import streamlit as st
import time
from streamlit_autorefresh import st_autorefresh
from auth import login_user, create_user, get_all_users, get_supervisors
from database import (
    init_db,
    create_task,
    get_employees_by_supervisor,
    get_tasks_created_by_supervisor,
    get_tasks_for_employee,
    update_task_status,
    get_tasks_pending_review
)
import os
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config("–ü–ª–∞–Ω–æ–≤–∏–∫ –∑–∞–¥–∞—á", layout="centered")
init_db()
st_autorefresh(interval=1000, key="global_refresh")  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 1 —Å–µ–∫

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
def clean_old_uploads(days=30):
    folder = "uploads"
    if not os.path.exists(folder):
        return
    for file in os.listdir(folder):
        path = os.path.join(folder, file)
        if os.path.isfile(path):
            file_time = datetime.fromtimestamp(os.path.getctime(path))
            if datetime.now() - file_time > timedelta(days=days):
                os.remove(path)

clean_old_uploads()

# –°—Ç–∏–ª–∏
st.markdown("""
    <style>
        .task-card {
            background-color: white;
            border-radius: 15px;
            box-shadow: 0px 4px 8px rgba(0,0,0,0.1);
            padding: 16px;
            margin-bottom: 12px;
            border-left: 6px solid #f0f0f0;
        }
        .task-card.overdue {
            border-left: 6px solid red;
        }
    </style>
""", unsafe_allow_html=True)

# –¢–∞–π–º–µ—Ä
def calculate_remaining_time(created_at_str, deadline_minutes):
    try:
        created_at = datetime.strptime(created_at_str, "%Y-%m-%d %H:%M:%S")
        deadline = created_at + timedelta(minutes=deadline_minutes)
        now = datetime.now()
        remaining = deadline - now
        if remaining.total_seconds() <= 0:
            return "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!", True
        else:
            return f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {str(remaining).split('.')[0]}", False
    except:
        return "", False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
if "action" in st.session_state:
    action = st.session_state.pop("action")
    update_task_status(
        action["task_id"],
        {"accept": "–≤ —Ä–∞–±–æ—Ç–µ", "done": "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", "check": "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"}[action["type"]],
        accepted=(action["type"] == "accept"),
        completed=(action["type"] == "done")
    )
    st.experimental_rerun()

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
if "user" not in st.session_state:
    st.title("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    login = st.text_input("–õ–æ–≥–∏–Ω")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
    if st.button("–í–æ–π—Ç–∏"):
        user_record = login_user(login, password)
        if user_record:
            st.session_state.user = user_record
            st.experimental_rerun()
        else:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    st.stop()

user = st.session_state.user

# –°–∞–π–¥–±–∞—Ä
st.sidebar.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user['username']} ({user['role']})")
if st.sidebar.button("–í—ã–π—Ç–∏"):
    del st.session_state.user
    st.experimental_rerun()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
if user['role'] == 'owner':
    st.subheader("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    with st.form("add_user"):
        new_username = st.text_input("–õ–æ–≥–∏–Ω")
        new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        new_role = st.selectbox("–†–æ–ª—å", ["supervisor", "employee"])
        supervisor = None
        if new_role == "employee":
            supervisors = get_supervisors()
            supervisor = st.selectbox("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", supervisors, format_func=lambda x: x[1]) if supervisors else None
        if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
            create_user(new_username, new_password, new_role, supervisor[0] if supervisor else None)
            st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_username} —Å–æ–∑–¥–∞–Ω")

# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
if user['role'] in ['owner', 'supervisor']:
    st.subheader("üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É")
    employees = get_employees_by_supervisor(user['id'])
    if employees:
        with st.form("task_form"):
            emp = st.selectbox("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", employees, format_func=lambda x: x[1])
            title = st.text_input("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏")
            desc = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
            img = st.file_uploader("–§–æ—Ç–æ", type=["jpg", "png"])
            prio = st.slider("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10)", 1, 10, 5)
            mins = st.number_input("–°—Ä–æ–∫ (–º–∏–Ω—É—Ç)", 1, 1440, 60)
            if st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å") and emp and title:
                image_path = None
                if img:
                    os.makedirs("uploads", exist_ok=True)
                    image_path = os.path.join("uploads", img.name)
                    with open(image_path, "wb") as f:
                        f.write(img.read())
                create_task(user['id'], emp[0], title, desc, image_path, prio, int(mins))
                st.success("–ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
    else:
        st.info("–ù–µ—Ç –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")

# –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
st.subheader("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
selected_status = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É", ["–í—Å–µ", "–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", "–≤ —Ä–∞–±–æ—Ç–µ", "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"])

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
if user['role'] == 'employee':
    tasks = get_tasks_for_employee(user['id'])
else:
    tasks = get_tasks_created_by_supervisor(user['id'])

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
for task in tasks:
    if selected_status != "–í—Å–µ" and task[8] != selected_status:
        continue

    remaining_text, is_overdue = ("", False)
    if task[8] == "–≤ —Ä–∞–±–æ—Ç–µ":
        remaining_text, is_overdue = calculate_remaining_time(task[9], task[7])

    border_class = "task-card overdue" if is_overdue else "task-card"
    st.markdown(f'<div class="{border_class}">', unsafe_allow_html=True)
    st.markdown(f"**–ó–∞–¥–∞—á–∞:** {task[3]}")
    st.markdown(f"–û–ø–∏—Å–∞–Ω–∏–µ: {task[4]}")
    st.markdown(f"–°—Ç–∞—Ç—É—Å: `{task[8]}`")

    if task[5] and os.path.exists(task[5]):
        st.image(task[5], width=250)

    if remaining_text:
        st.markdown(f"<span style='color:gray'>{remaining_text}</span>", unsafe_allow_html=True)

    if user['role'] == 'employee' and task[8] == "–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ":
        if st.button("–ü—Ä–∏–Ω—è—Ç—å", key=f"accept_{task[0]}"):
            st.session_state.action = {"type": "accept", "task_id": task[0]}
    elif user['role'] == 'employee' and task[8] == "–≤ —Ä–∞–±–æ—Ç–µ":
        if st.button("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", key=f"done_{task[0]}"):
            st.session_state.action = {"type": "done", "task_id": task[0]}
    elif user['role'] in ["supervisor", "owner"] and task[8] == "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ":
        if st.button("–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ", key=f"check_{task[0]}"):
            st.session_state.action = {"type": "check", "task_id": task[0]}

    st.markdown("</div>", unsafe_allow_html=True)
