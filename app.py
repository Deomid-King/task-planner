import streamlit as st
import time
from database import init_db
from auth import login_user, create_user, get_all_users, get_supervisors
from database import (
    create_task, get_employees_by_supervisor, get_tasks_created_by_supervisor,
    get_tasks_for_employee, update_task_status, get_tasks_pending_review
)
import os
import uuid
import datetime

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑—É
init_db()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü–ª–∞–Ω–æ–≤–∏–∫ –∑–∞–¥–∞—á", layout="wide")

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ---
if 'user' not in st.session_state:
    st.title("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    username = st.text_input("–õ–æ–≥–∏–Ω")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
    if st.button("–í–æ–π—Ç–∏", use_container_width=True):
        user = login_user(username, password)
        if user:
            st.session_state.user = user
            st.rerun()
        else:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
else:
    user = st.session_state.user
    st.sidebar.title(f"üë§ {user['username']} ({user['role']})")

    if st.sidebar.button("üö™ –í—ã–π—Ç–∏"):
        del st.session_state.user
        st.rerun()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    if user['role'] == 'employee':
        st.sidebar.markdown("---")
        st.sidebar.subheader("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

        tasks = get_tasks_for_employee(user['id'])
        now = datetime.datetime.now()

        for task in tasks:
            task_id, title, _, _, _, deadline, status, _, accepted_at = task

            if status == '–≤ —Ä–∞–±–æ—Ç–µ' and accepted_at:
                accepted_time = datetime.datetime.strptime(accepted_at, "%Y-%m-%d %H:%M:%S.%f")
                deadline_time = accepted_time + datetime.timedelta(minutes=deadline)
                remaining = deadline_time - now

                if remaining.total_seconds() < 0:
                    st.sidebar.error(f"üî¥ {title}: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!")
                elif remaining.total_seconds() < 1800:
                    st.sidebar.warning(f"‚è≥ {title}: <30 –º–∏–Ω")

            if status == '–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ':
                created_time = datetime.datetime.strptime(str(task[7]), "%Y-%m-%d %H:%M:%S")
                if (now - created_time).total_seconds() > 600:
                    st.sidebar.info(f"‚ö†Ô∏è {title}: –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ >10 –º–∏–Ω")

    st.title("üìã –ü–ª–∞–Ω–æ–≤–∏–∫ –∑–∞–¥–∞—á")

    # --- –í–ª–∞–¥–µ–ª–µ—Ü ---
    if user['role'] == 'owner':
        st.subheader("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

        with st.expander("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
            new_username = st.text_input("–õ–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            role = st.selectbox("–†–æ–ª—å", ["supervisor", "employee"])

            supervisors = get_supervisors()
            supervisor_names = [f"{id} ‚Äî {name}" for id, name in supervisors]
            supervisor_id = None
            if role == "employee" and supervisor_names:
                selected = st.selectbox("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", supervisor_names)
                supervisor_id = int(selected.split(" ‚Äî ")[0])

            if st.button("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                if new_username and new_password:
                    success = create_user(new_username, new_password, role, supervisor_id)
                    if success:
                        st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{new_username}' —Å–æ–∑–¥–∞–Ω")
                        st.rerun()
                    else:
                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ–∑–º–æ–∂–Ω–æ, –ª–æ–≥–∏–Ω –∑–∞–Ω—è—Ç)")
                else:
                    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

        st.markdown("---")
        st.subheader("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        users = get_all_users()
        for uid, uname, urole in users:
            st.write(f"üë§ {uname} ‚Äî *{urole}*")

    # --- –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å ---
    elif user['role'] == 'supervisor':
        st.subheader("üìå –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")

        employees = get_employees_by_supervisor(user['id'])
        if not employees:
            st.warning("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö.")
        else:
            emp_dict = {f"{name} (ID {id})": id for id, name in employees}
            selected_emp = st.selectbox("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", list(emp_dict.keys()))
            title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
            description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
            priority = st.slider("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1 = —Å—Ä–æ—á–Ω–æ, 10 = –Ω–µ–≤–∞–∂–Ω–æ)", 1, 10, 5)
            deadline = st.number_input("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö)", min_value=1, step=1)

            uploaded_file = st.file_uploader("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])
            image_path = None

            if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"):
                if title and description:
                    if uploaded_file:
                        os.makedirs("tasks", exist_ok=True)
                        file_id = f"{uuid.uuid4()}.png"
                        image_path = os.path.join("tasks", file_id)
                        with open(image_path, "wb") as f:
                            f.write(uploaded_file.read())
                    create_task(
                        creator_id=user['id'],
                        assignee_id=emp_dict[selected_emp],
                        title=title,
                        description=description,
                        image_path=image_path,
                        priority=priority,
                        deadline_minutes=deadline
                    )
                    st.success("–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                    st.rerun()
                else:
                    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

        st.markdown("---")
        st.subheader("üìã –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        task_list = get_tasks_created_by_supervisor(user['id'])
        for tid, empname, title, status, priority, created_at in task_list:
            st.markdown(f"""
            üßë‚Äçüíº **{empname}**  
            üìå **{title}**  
            ‚è±Ô∏è –°—Ç–∞—Ç—É—Å: *{status}* | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: **{priority}**  
            üïí –°–æ–∑–¥–∞–Ω–∞: {created_at}
            ---
            """)

        st.markdown("---")
        st.subheader("üîç –ó–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø—Ä–∏–Ω—è—Ç–∏—è")
        review_tasks = get_tasks_pending_review(user['id'])

        for tid, empname, title, status, priority, created_at in review_tasks:
            st.markdown(f"""
            üßë‚Äçüíº **{empname}**  
            üìå **{title}**  
            ‚è± –°—Ç–∞—Ç—É—Å: *{status}* | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: **{priority}**  
            üïí –°–æ–∑–¥–∞–Ω–∞: {created_at}
            """)

            col1, col2 = st.columns(2)
            with col1:
                if status == "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ":
                    if st.button(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ‚Äî {tid}", key=f"verify_{tid}"):
                        update_task_status(tid, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                        st.rerun()
            with col2:
                if status == "–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ":
                    if st.button(f"üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å ‚Äî {tid}", key=f"remind_{tid}"):
                        st.info(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É '{empname}'!")

            st.markdown("---")

    # --- –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ---
    elif user['role'] == 'employee':
        st.subheader("üì• –ú–æ–∏ –∑–∞–¥–∞—á–∏")

        status_filter = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
            options=["–≤—Å–µ", "–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", "–≤ —Ä–∞–±–æ—Ç–µ", "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"],
            index=0
        )

        task_placeholder = st.empty()

        def render_tasks():
            all_tasks = get_tasks_for_employee(user['id'])
            tasks = [t for t in all_tasks if status_filter == "–≤—Å–µ" or t[6] == status_filter]

            if not tasks:
                st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.")
            else:
                for task in tasks:
                    task_id, title, description, image_path, priority, deadline, status, created_at, accepted_at = task

                    deadline_time = None
                    time_left = None
                    if status == '–≤ —Ä–∞–±–æ—Ç–µ' and accepted_at:
                        deadline_time = datetime.datetime.strptime(accepted_at, "%Y-%m-%d %H:%M:%S.%f") + datetime.timedelta(minutes=deadline)
                        now = datetime.datetime.now()
                        time_left = deadline_time - now

                        if time_left.total_seconds() > 0:
                            timer_text = f"‚è≥ –î–æ –¥–µ–¥–ª–∞–π–Ω–∞: {str(time_left).split('.')[0]}"
                        else:
                            timer_text = "üî¥ –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω!"
                    else:
                        timer_text = "‚Äî"

                    st.markdown(f"""
                    ### üìå {title}
                    üìù {description}  
                    üî¥ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: **{priority}**  
                    ‚è± –°—Ç–∞—Ç—É—Å: *{status}*  
                    üìÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞: {created_at}  
                    üïí {timer_text}
                    """)

                    if image_path and os.path.exists(image_path):
                        st.image(image_path, width=300)

                    col1, col2 = st.columns(2)
                    with col1:
                        if status == '–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ':
                            if st.button("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", key=f"accept_{task_id}"):
                                update_task_status(task_id, "–≤ —Ä–∞–±–æ—Ç–µ", accepted=True)
                                st.rerun()
                    with col2:
                        if status == '–≤ —Ä–∞–±–æ—Ç–µ':
                            if st.button("üì§ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", key=f"done_{task_id}"):
                                update_task_status(task_id, "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", completed=True)
                                st.rerun()
                    st.markdown("---")

        with task_placeholder.container():
            render_tasks()

        time.sleep(1)
        st.rerun()

    else:
        st.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
