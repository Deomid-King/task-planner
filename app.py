# app.py
import streamlit as st
import yaml
import streamlit_authenticator as stauth
from yaml.loader import SafeLoader
import datetime
import time
import os
from database import init_db
from auth import login_user, create_user, get_all_users, get_supervisors
from database import (
    create_task, get_employees_by_supervisor, get_tasks_created_by_supervisor,
    get_tasks_for_employee, update_task_status, get_tasks_pending_review
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
init_db()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü–ª–∞–Ω–æ–≤–∏–∫ –∑–∞–¥–∞—á", layout="wide")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open("config.yaml") as file:
    config = yaml.load(file, Loader=SafeLoader)

authenticator = stauth.Authenticate(
    config['credentials'],
    config['cookie']['name'],
    config['cookie']['key'],
    config['cookie']['expiry_days'],
    config['preauthorized']
)

name, authentication_status, username = authenticator.login("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É", "main")

if authentication_status is False:
    st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
elif authentication_status is None:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")

if authentication_status:
    st.sidebar.title(f"üë§ {name}")
    authenticator.logout("üö™ –í—ã–π—Ç–∏", "sidebar")

    # –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_record = login_user(username, None, bypass_password=True)
    role = user_record['role']
    user_id = user_record['id']

    st.title("üìã –ü–ª–∞–Ω–æ–≤–∏–∫ –∑–∞–¥–∞—á")

    # –í–ª–∞–¥–µ–ª–µ—Ü
    if role == 'owner':
        st.subheader("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        with st.expander("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
            new_username = st.text_input("–õ–æ–≥–∏–Ω")
            new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            new_role = st.selectbox("–†–æ–ª—å", ["supervisor", "employee"])

            supervisors = get_supervisors()
            supervisor_id = None
            if new_role == "employee" and supervisors:
                sel = st.selectbox("–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", [f"{i[0]} ‚Äî {i[1]}" for i in supervisors])
                supervisor_id = int(sel.split(" ‚Äî ")[0])

            if st.button("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                create_user(new_username, new_password, new_role, supervisor_id)
                st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
                st.rerun()

        st.subheader("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        for u in get_all_users():
            st.write(f"{u[1]} ({u[2]})")

    # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
    elif role == 'supervisor':
        st.subheader("üìå –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
        employees = get_employees_by_supervisor(user_id)
        emp_dict = {f"{e[1]} (ID {e[0]})": e[0] for e in employees}
        selected_emp = st.selectbox("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", list(emp_dict.keys()))
        title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
        priority = st.slider("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", 1, 10, 5)
        deadline = st.number_input("–°—Ä–æ–∫ (–º–∏–Ω)", 1)

        image_path = None
        file = st.file_uploader("–§–∞–π–ª", type=["jpg", "jpeg", "png"])
        if file:
            os.makedirs("tasks", exist_ok=True)
            image_path = os.path.join("tasks", file.name)
            with open(image_path, "wb") as f:
                f.write(file.read())

        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"):
            create_task(user_id, emp_dict[selected_emp], title, description, image_path, priority, deadline)
            st.success("–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            st.rerun()

        st.subheader("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
        tasks = get_tasks_created_by_supervisor(user_id)
        for t in tasks:
            st.markdown(f"**{t[2]}** ‚Äî {t[3]} | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {t[4]}")

    # –°–æ—Ç—Ä—É–¥–Ω–∏–∫
    elif role == 'employee':
        st.subheader("üì• –ú–æ–∏ –∑–∞–¥–∞—á–∏")
        tasks = get_tasks_for_employee(user_id)

        for task in tasks:
            task_id, title, desc, image, priority, deadline, status, created, accepted = task
            st.markdown(f"### üìå {title}\n{desc}")

            if image and os.path.exists(image):
                st.image(image, width=300)

            st.text(f"–°—Ç–∞—Ç—É—Å: {status} | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority} | –°—Ä–æ–∫: {deadline} –º–∏–Ω")

            col1, col2 = st.columns(2)
            if status == '–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ':
                if col1.button("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", key=f"acc_{task_id}"):
                    update_task_status(task_id, '–≤ —Ä–∞–±–æ—Ç–µ', accepted=True)
                    st.rerun()
            elif status == '–≤ —Ä–∞–±–æ—Ç–µ':
                if col2.button("üì§ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", key=f"done_{task_id}"):
                    update_task_status(task_id, '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', completed=True)
                    st.rerun()

            st.markdown("---")
