import streamlit as st
from auth import login_user, create_user, get_all_users, get_supervisors
from database import (
    init_db,
    create_task,
    get_employees_by_supervisor,
    get_tasks_created_by_supervisor,
    get_tasks_for_employee,
    update_task_status,
    get_tasks_pending_review
)
import os
from datetime import datetime, timedelta

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –°—Ç–∏–ª–∏
st.markdown("""
    <style>
        .task-card {
            background-color: white;
            border-radius: 15px;
            box-shadow: 0px 4px 8px rgba(0,0,0,0.1);
            padding: 16px;
            margin-bottom: 12px;
        }
        .title {
            font-weight: 600;
            font-family: Montserrat, sans-serif;
        }
        .low { color: gray; }
        .medium { color: #aaa; }
        .high { color: black; }
    </style>
""", unsafe_allow_html=True)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
if "user" not in st.session_state:
    st.title("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    login = st.text_input("–õ–æ–≥–∏–Ω")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
    if st.button("–í–æ–π—Ç–∏"):
        user_record = login_user(login, password)
        if user_record:
            st.session_state.user = user_record
            st.experimental_rerun()
        else:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    st.stop()

user = st.session_state.user
st.sidebar.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user['username']} ({user['role']})")
if st.sidebar.button("–í—ã–π—Ç–∏"):
    del st.session_state.user
    st.experimental_rerun()

# –í–ª–∞–¥–µ–ª—å—Ü—É ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
if user['role'] == 'owner':
    st.subheader("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    with st.form("add_user"):
        new_username = st.text_input("–ù–æ–≤—ã–π –ª–æ–≥–∏–Ω")
        new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        new_role = st.selectbox("–†–æ–ª—å", ["supervisor", "employee"])
        supervisor = None
        if new_role == "employee":
            supervisors = get_supervisors()
            supervisor = st.selectbox("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", supervisors, format_func=lambda x: x[1]) if supervisors else None
        submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if submitted and new_username and new_password:
            create_user(new_username, new_password, new_role, supervisor[0] if supervisor else None)
            st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_username} —Å–æ–∑–¥–∞–Ω")

# –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å ‚Äî –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á
if user['role'] in ['owner', 'supervisor']:
    st.subheader("üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É")
    employees = get_employees_by_supervisor(user['id'])
    if employees:
        with st.form("task_form"):
            emp = st.selectbox("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", employees, format_func=lambda x: x[1])
            title = st.text_input("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏")
            desc = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
            img = st.file_uploader("–§–æ—Ç–æ", type=["jpg", "png"], accept_multiple_files=False)
            prio = st.slider("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10)", 1, 10, 5)
            mins = st.number_input("–°—Ä–æ–∫ (–≤ –º–∏–Ω—É—Ç–∞—Ö)", 1, 1440, 60)
            submit = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
            if submit and emp and title:
                img_path = None
                if img:
                    img_path = os.path.join("uploads", img.name)
                    with open(img_path, "wb") as f:
                        f.write(img.read())
                create_task(user['id'], emp[0], title, desc, img_path, prio, int(mins))
                st.success("–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    else:
        st.info("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á
st.subheader("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
if user['role'] == 'employee':
    tasks = get_tasks_for_employee(user['id'])
else:
    tasks = get_tasks_created_by_supervisor(user['id'])

for task in tasks:
    st.markdown('<div class="task-card">', unsafe_allow_html=True)
    st.markdown(f"**–ó–∞–¥–∞—á–∞:** {task[3]}")
    st.markdown(f"–û–ø–∏—Å–∞–Ω–∏–µ: {task[4]}")
    st.markdown(f"–°—Ç–∞—Ç—É—Å: `{task[8]}`")
    if task[5]:
        st.image(task[5], width=300)
    if user['role'] == 'employee' and task[8] == "–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ":
        if st.button("–ü—Ä–∏–Ω—è—Ç—å", key=f"accept_{task[0]}"):
            update_task_status(task[0], "–≤ —Ä–∞–±–æ—Ç–µ", accepted=True)
            st.experimental_rerun()
    elif user['role'] == 'employee' and task[8] == "–≤ —Ä–∞–±–æ—Ç–µ":
        if st.button("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", key=f"done_{task[0]}"):
            update_task_status(task[0], "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", completed=True)
            st.experimental_rerun()
    elif user['role'] in ["supervisor", "owner"] and task[8] == "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ":
        if st.button("–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ", key=f"check_{task[0]}"):
            update_task_status(task[0], "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            st.experimental_rerun()
    st.markdown("</div>", unsafe_allow_html=True)